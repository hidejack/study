ollydbg 使用：

定位地址 ： 
    Ctr + G 输入 Win32 函数名进行查找

断点 ： 
    F2：在当前位置打断点
    bp：指令地址
    F8：单步步过
    F7：单步步入
    F4：运行到选定位置
    F9：运行
    Ctr + F9：执行到返回
    Alt + F9：执行到用户代码

    F3 打开文件进行调试
F2 添加/移除断点
Ctrl+F2 重新运行正在被调试的程序
Alt+F2  关闭正在被调试的程序

F7 单步步入
F8 单步步过
F9 让程序运行到下一个断点

Alt+B 显示断点窗口
Alt+C 显示CPU窗口
Alt+E 显示模块列表
Alt+K 显示调用栈窗口
Alt+L 显示日志窗口
Alt+M 显示内存窗口

Alt+F9 回到用户程序的领空

Ctrl+B 二进制搜索
Ctrl+F 汇编指令搜索
Ctrl+G 跟随表达式（可以是win32 API）

;     在汇编指令后写入注释
空格   修改该条汇编指令


========================================================================================
pushad 后的栈(pushad 压入32位寄存器进栈)
入栈顺序： eax,ecx,edx,ebx,esp,ebp,esi,edi
此时栈中指向为
edi <--- esp
esi <--- esp + 0x04
ebp <--- esp + 0x08
esp <--- esp + 0x0c
ebx <--- esp + 0x10
edx <--- esp + 0x14
ecx <--- esp + 0x18
eax <--- esp + 0x1C

默认规则：eax 为函数的返回值！

movsx A,B
movzx A,B

两者后的操作数B所占空间必须小于操作数A
movsx ： 用操作数B的符号位扩展填充操作数A的余下空间，如果是负数则填充1，正数同movzx 功能
movzx：用0来填充操作数A的余下空间

lea A，B
将B的内存地址赋值给A
例： lea eax,[ebx+8]
将ebx+8 这个值赋值给eax
