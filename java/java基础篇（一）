内容：
一、认识Linux操作系统
二、java开发环境
三、java语言的特点
四、java编程规范


一、认识Linux操作系统
1.开源的操作系统，免费，主要应用于服务器端
	java主要是服务器端开发，最终部署环境一般都是Linux
2.Linux与Window系统目录结构的区别
	1）文件系统不同：
		Linux：目录   Windows：盘符
	2）外部设备映射不同：
		Linux：挂载点  Windows：盘符
	3）安全级别不同：
		Linux：高  Windows：低
3.Linux是基于命令操作的：
	1）pwd：显示当前工作目录
	2）ls：查看当前工作目录的内容
	3）cd：改变当前工作目录
 		绝对路径:相对于根目录的位置，以/开头
		相对路径:相对于当前目录的位置
		         .:当前目录
				 ..:上一级目录	

二、java开发环境：
1.java编译运行过程（*）
	1）编译期：先将.java文件编译成.class文件
	2）解释期：解释器把源文件逐行解释------即加载运行，运行期
过程：java源代码文件（.java文件）------->java编译器（javac）----->java字节码文件（.class文件，平台无关的）------>java解释器（java），执行java字节码（.class文件）

注：a.因为java文件执行的是.class文件，不是二进制代码，因此具有跨平台性。	
   b.java程序的执行是在JVM上解释执行的，java是跨平台的，而JVM不是跨平台的。
   c.java跨平台的本质在于JVM不是跨平台的
   d.不同平台的JVM不同
2.名词解释
	1）JVM：虚拟机
	2）JRE：运行环境
	3）JDK：开发工具包
3.配置环境变量
	1）JAVA_HOME:配置JDK的目录
	2）CLASSPATH：指定到哪里去找运行时需要用到的类代码（字节码）
	3）PATH:指定可执行程序的位置，指向JDK下的bin目录	
4.Eclipse IDE
	eclipse IDE：开发工具


三、java语言特点：
1.主要有4个特征：封装、继承、抽象、多态
	1）封装：高内聚，低耦合的特性
	2）继承：java中只支持单继承，但接口间可以多继承。提高了软件的可重用性和可扩展性
	3）抽象：行为的抽象和状态的抽象
	4）多态：程序中定义一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法到底是哪个类中实现的方法，必须由程序运行期间才能决定。因为在程序运行时才确定具体的类，不用修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性增强了软件的灵活性和扩展性
2.java执行的是.class文件
3.java中对内存的分配是动态的
4.java不使用指针，基本类型固定长度，可移植性好


四、java编程规范：
1.命名规则
	1）基本的规则：
		--只能采用字母、数字、下划线的组合进行命名    建议：无特别理由不能用任何其他字符
		--命名要有一定意义，做到“见名知义”！
		--命名要尽量的短，可以采用缩写，但要有一定意义，而且需要在整个项目中维护这些缩写的意义
		--缩写时删除所有的原音字母，压缩重复字母，若发生命名冲突，可保留原音字母
		--命名的首尾不能用下划线
		
	2）常量命名：
		--所有的字符采用大写，单词与单词之间用_隔开
		--命名尽量间断，不要超过16个字符
		--编程中尽量避免直接对literal进行工作，最好用引入常量方式进行。
	3）变量命名：
		--避免命名使用数字，除非命名意义明确，程序更加清晰
		--变量名称是名词意义
		--驼峰命名法
		--除了生命周期很短的临时变量，避免采用单字符作为变量名
		--所有的类型前缀必须小写，实体部分首字母大写
		--java不推荐使用前缀，而是推荐保持名称的语义
	4）方法命名：
		--命名多数为动词结构，无特别理由不要用下划线作为分割符
	5）类和接口的命名：
		--首字母大写，其余字母小写（特殊字除外）
	6）包的命名：
		--包名所有的字符都为小写
		--两个不同业务的包之间不要双向依赖，可以单向依赖
		--采用逻辑上的层次结构，从而减少依赖

2.注释规范
	1)单行注释----行注释
		-- // 
	2）多行注释----块注释---------在代码中禁止使用
		--/* 内容 */   
	3）文档注释   jaba特有
		-- /**  内容 */   
		-- 文档注释可以用javadoc把注释提取成html页面（只有写在包、类、属性、方法、构造器、引入之前的注释才可以进行提取）
	4）规则
		--注释不能嵌套，要简单明了


3.编码规范
	1）基本原则
		--字符串的拼加操作，必须使用StringBuilder
		--try catch 的用法，捕获的异常，不知到怎么处理就抛出去
	**	--返回类型为集合的，方法声明中必须使用泛型，要清楚什么情况返回null，什么情况返回空集合
		--方法，变量声明范围采用如下优先级：private protected public 变量的优先级：局部变量，实例变量，类变量。实例变量和类变量要注意线程安全
		--如果不是必须，不要在循环中去定义变量或者new对象，尽量在最后一刻才去new对象
		--如果不是必须，不要在循环中用try ... catch
		--代码中绝对不允许采用块注释 /**/
		--xwork的配置文件必须小写
		--严禁使用 System.out.println()进行调试输出。要使用调试信息必须使用 log.debug() 必要的信息使用log.info()进行输出
		--类中不要出现无用的 import 
		--有业务逻辑处理的类必须写junit单元测试类
		--优先采用局部变量（减少可见性和生存期），用全局变量的可以用ThreadLocal来处理

































3.编码规范

















